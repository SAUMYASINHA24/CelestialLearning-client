[{"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/index.js":"1","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/store.js":"2","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/App.js":"3","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/reducers/userReducer.js":"4","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Utils/CourseCard.js":"5","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Utils/Home.js":"6","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Utils/Header.js":"7","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/constants/userConstants.js":"8","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/actions/userActions.js":"9","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/actions/subscriberActions.js":"10","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Subscriber/SubscriberLogin.js":"11","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Subscriber/SubscriberVerify.js":"12","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Subscriber/SubscriberSignup.js":"13","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Author/AuthorLogin.js":"14","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Author/AuthorSignup.js":"15","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/actions/authorActions.js":"16","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Author/AuthorVerify.js":"17"},{"size":360,"mtime":1609243674517,"results":"18","hashOfConfig":"19"},{"size":910,"mtime":1609839595807,"results":"20","hashOfConfig":"19"},{"size":1546,"mtime":1609841532993,"results":"21","hashOfConfig":"19"},{"size":4485,"mtime":1609836109457,"results":"22","hashOfConfig":"19"},{"size":535,"mtime":1609739016623,"results":"23","hashOfConfig":"19"},{"size":483,"mtime":1609739016623,"results":"24","hashOfConfig":"19"},{"size":2329,"mtime":1609739016623,"results":"25","hashOfConfig":"19"},{"size":1795,"mtime":1609748326374,"results":"26","hashOfConfig":"19"},{"size":2145,"mtime":1609750614845,"results":"27","hashOfConfig":"19"},{"size":2505,"mtime":1609832043006,"results":"28","hashOfConfig":"19"},{"size":3175,"mtime":1609839656629,"results":"29","hashOfConfig":"19"},{"size":1136,"mtime":1609839300671,"results":"30","hashOfConfig":"19"},{"size":4694,"mtime":1609839619594,"results":"31","hashOfConfig":"19"},{"size":3100,"mtime":1609842172101,"results":"32","hashOfConfig":"19"},{"size":4569,"mtime":1609841045020,"results":"33","hashOfConfig":"19"},{"size":2410,"mtime":1609835691191,"results":"34","hashOfConfig":"19"},{"size":773,"mtime":1609841252948,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"p1asi0",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/index.js",[],["78","79"],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/store.js",[],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/App.js",["80","81"],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/reducers/userReducer.js",[],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Utils/CourseCard.js",[],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Utils/Home.js",[],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Utils/Header.js",["82","83","84","85","86"],"import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport '../styles/Header.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport SearchIcon from '@material-ui/icons/Search';\nimport logo from '../assets/logo2.svg';\nimport { Button } from 'shards-react';\n\nimport {\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Dropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    FormInput,\n    Collapse\n} from 'shards-react';\n\nexport const Header = () => {\n    const history = useHistory();\n\n    function loginHandleClick() {\n        history.push('/subscriber/login');\n    }\n    const signupHandleClick = () => {\n        history.push('/subscriber/signup');\n    };\n    return (\n        <Navbar className=\"nav\" expand=\"md\">\n            <NavbarBrand>\n                <img src={logo} />\n            </NavbarBrand>\n            <NavbarToggler />\n\n            <Collapse navbar>\n                <Nav navbar>\n                    <NavItem>\n                        <NavLink>Categories</NavLink>\n                    </NavItem>\n                </Nav>\n\n                <Nav navbar className=\"ml-auto\">\n                    <InputGroup size=\"sm\" seamless>\n                        <InputGroupAddon type=\"prepend\">\n                            <InputGroupText>\n                                <SearchIcon />\n                            </InputGroupText>\n                        </InputGroupAddon>\n                        <FormInput className=\"border-0\" placeholder=\"Search...\" />\n                    </InputGroup>\n                </Nav>\n\n                <div className=\"right\">\n                    <ShoppingCartIcon fontSize=\"large\" />\n                </div>\n                <div className=\"right\">\n                    <Button outline theme=\"danger\" onClick={loginHandleClick}>\n                        LogIn\n                    </Button>\n                </div>\n                <Button outline theme=\"danger\" onClick={signupHandleClick}>\n                    SignUp\n                </Button>\n                <div className=\"right\"></div>\n            </Collapse>\n        </Navbar>\n    );\n};\n\nexport default Header;\n","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/constants/userConstants.js",[],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/actions/userActions.js",[],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/actions/subscriberActions.js",["87","88"],"import axios from 'axios'\nimport {\n  \n  SUBSCRIBER_LOGIN_FAIL,\n  SUBSCRIBER_LOGIN_REQUEST,\n  SUBSCRIBER_LOGIN_SUCCESS,\n  SUBSCRIBER_LOGOUT,\n\n  SUBSCRIBER_REGISTER_FAIL,\n  SUBSCRIBER_REGISTER_REQUEST,\n  SUBSCRIBER_REGISTER_SUCCESS,\n  \n  SUBSCRIBER_VERIFY_REQUEST,\n  SUBSCRIBER_VERIFY_SUCCESS,\n  SUBSCRIBER_VERIFY_FAIL,\n\n} from '../constants/userConstants'\n\nexport const register = (username, email, password , confirm_password) => async (dispatch) => {\n     try {\n       dispatch({\n         type: SUBSCRIBER_REGISTER_REQUEST,\n       })\n   \n       await axios.post(\n         '/subscriber/register',\n         { username, email, password , confirm_password },\n       ).then(res => {\n            dispatch({\n                 type : SUBSCRIBER_REGISTER_SUCCESS ,\n                 payload : \"An Email has been sent to you.\"\n            })\n       })\n       \n     } catch (error) {\n       dispatch({\n         type: SUBSCRIBER_REGISTER_FAIL,\n         payload:\n           error.response && error.response.data.message\n             ? error.response.data.message\n             : error.message,\n       })\n     }\n   }\n\n   export const verifySubscriber = (token) => async (dispatch) => {\n     try {\n       dispatch({\n         type:SUBSCRIBER_VERIFY_REQUEST,\n       })\n   \n       await axios.post(\n         '/subscriber/verify',\n         { token },\n       )\n       dispatch({\n         type:SUBSCRIBER_VERIFY_SUCCESS,\n       })\n       \n       \n     } catch (error) {\n       dispatch({\n         type:SUBSCRIBER_VERIFY_FAIL,\n         payload:\n           error.response && error.response.data.message\n             ? error.response.data.message\n             : error.message,\n       })\n     }\n   }\n\n\n   const login = (email, password) => async (dispatch) => {\n     try {\n       dispatch({\n         type: SUBSCRIBER_LOGIN_REQUEST,\n       })\n   \n       const config = {\n         headers: {\n           'Content-Type': 'application/json',\n         },\n       }\n   \n       const { data } = await axios.post(\n         '/subscriber/login',\n         { email, password },\n         config\n       )\n   \n       dispatch({\n         type: SUBSCRIBER_LOGIN_SUCCESS,\n         payload: data,\n       })\n   \n       localStorage.setItem('subscriberInfo', JSON.stringify(data))\n     } catch (error) {\n       dispatch({\n         type: SUBSCRIBER_LOGIN_FAIL,\n         payload:\n           error.response && error.response.data.message\n             ? error.response.data.message\n             : error.message,\n       })\n     }\n   }","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Subscriber/SubscriberLogin.js",["89","90","91"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Form, FormInput, FormGroup } from 'shards-react';\nimport { Card, CardHeader, CardTitle, CardImg, CardBody, CardFooter, Button } from 'shards-react';\nimport \"../styles/UserLogin.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\nimport login from \"../../actions/subscriberActions\"\nimport Swal from 'sweetalert2'\n\n\nfunction SubscriberLogin({history}) {\n     const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const dispatch = useDispatch();\n\n    const subscriberLogin = useSelector(state => state.subscriberLogin);\n    const { loading, error, subscriberInfo } = subscriberLogin;\n\n    useEffect(() => {\n        if (subscriberInfo) {\n            console.log(\"Loged In\")\n            history.push('/')\n        }\n        if(error){\n             Swal.fire({\n                  icon : 'error' ,\n                  text : `${error}`\n             })\n        }\n    }, [ subscriberInfo , error]);   \n\n    const submitHandler = e => {\n        e.preventDefault();\n        dispatch(login(email, password));\n       \n    };\n    return (\n        <div className=\"loginclass\">\n            <Card className=\"login\" theme=\"info\" style={{ maxWidth: '450px' }}>\n                <CardHeader></CardHeader>\n                {/* <CardImg src=\"https://place-hold.it/300x200\" /> */}\n                <CardBody>\n                    <CardTitle className=\"tex\">Subscriber Login</CardTitle>\n                    <Form onSubmit={submitHandler}>\n                        <FormGroup>\n                            <label htmlFor=\"email\">Email</label>\n                            <FormInput\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email\"\n                                onChange={event => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <label htmlFor=\"password\">Password</label>\n                            <FormInput\n                                type=\"password\"\n                                id=\"#password\"\n                                placeholder=\"Password\"\n                                onChange={event => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <Button className=\"button1\" theme=\"success\">Login</Button>\n                    </Form>\n                </CardBody>\n                <CardFooter>\n                    <a href=\"/subscriber/signup/\">Not registered?</a>\n                    <br />\n                    <a href=\"/author/login\">Are you an Author?</a>\n                    <br />\n                    <a href=\"/path_to_page\">Having problems logging in?</a>\n                </CardFooter>\n            </Card>\n        </div>\n    );\n}\n\nexport default SubscriberLogin\n\n","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Subscriber/SubscriberVerify.js",["92"],"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport Swal  from \"sweetalert2\"\nimport { verifySubscriber } from '../../actions/subscriberActions';\n\n\n\nfunction SubscriberVerify({match}) {\n     const dispatch = useDispatch();\n     const history = useHistory()\n \n     const subscriberVerify = useSelector(state => state.subscriberVerify);\n     const { loading, error, verify } = subscriberVerify;\n \n     let token = match.params.token;\n \n     useEffect(() => {\n         if(error){\n              Swal.fire({\n                   icon : 'error' ,\n                   text : `${error}`\n              })\n           if(verify){\n                console.log(\"True\")\n                history.push('/subscriber/login')\n           }\n         }\n     }, [ history , verify , error ]);\n \n     const submitHandler = e => {\n         e.preventDefault();\n         dispatch(verifySubscriber(token));\n     };\n \n     return (\n         <form onSubmit={submitHandler}>\n             <button>Submit</button>\n         </form>\n     );\n}\n\nexport default SubscriberVerify\n\n","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Subscriber/SubscriberSignup.js",["93","94","95","96"],"import React, { useEffect, useState } from 'react';\n\nimport { Form, FormInput, FormGroup } from 'shards-react';\n//import { register } from '../../actions/userActions';\nimport {register} from '../../actions/subscriberActions'\nimport { Card, CardHeader, CardTitle, CardImg, CardBody, CardFooter, Button } from 'shards-react';\nimport '../styles/UserSignUp.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\nimport Swal from \"sweetalert2\"\nimport { useDispatch, useSelector } from 'react-redux';\n\n\n\n\nfunction SubscriberSignup() {\n     const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const dispatch = useDispatch();\n\n    const subscriberRegister = useSelector(state => state.subscriberRegister);\n    const { loading, error ,success , message } = subscriberRegister;\n\n//     const userLogin = useSelector(state => state.userLogin);\n//     const { userInfo } = userLogin;\n\n    useEffect(() => {\n     \n\n          if(error){\n               Swal.fire({\n                    icon : 'error' ,\n                    text : `${error}`    \n               })\n               console.log(\"Error : \" , error)\n          }\n\n          if(success){\n               Swal.fire({\n                    icon : 'success' ,\n                    text : `${message}`\n               })\n          }\n    }, [error ,success ]);\n\n\n    const submitHandler = e => {\n        e.preventDefault();\n        if (password !== confirmPassword) {\n            console.log('Passwords do not match');\n        } else {\n            // console.log(\"matched\")\n            dispatch(register(name, email, password, confirmPassword));\n            console.log(`Activation Link Sent to ${email}`);\n        }\n    };\n\n    return (\n        <div className=\"signup\">\n\n            <Card className=\"sign\" theme=\"info\" style={{ maxWidth: '450px' }}>\n                {/* <CardImg src=\"https://place-hold.it/300x200\" /> */}\n                <CardBody>\n                    <CardTitle className=\"tex\">Subscriber Signup</CardTitle>\n\n                    <Form onSubmit={submitHandler}>\n                        <FormGroup>\n                            <label htmlFor=\"username\">Username</label>\n                            <FormInput\n                                type=\"text\"\n                                id=\"username\"\n                                placeholder=\"Username\"\n                                onChange={event => {\n                                    setName(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <label htmlFor=\"email\">Email</label>\n                            <FormInput\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email\"\n                                onChange={event => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <label htmlFor=\"password\">Password</label>\n                            <FormInput\n                                type=\"password\"\n                                id=\"#password\"\n                                placeholder=\"Password\"\n                                onChange={event => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <label htmlFor=\"confirmpassword\">Confirm Password</label>\n                            <FormInput\n                                type=\"password\"\n                                id=\"confirmpassword\"\n                                placeholder=\"Confirm Password\"\n                                onChange={event => {\n                                    setConfirmPassword(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <Button theme=\"success\">Sign Up</Button>\n                    </Form>\n                </CardBody>\n                <CardFooter>\n                    <a href=\"/author/signup\">Are you an Author?</a><br />\n                    <a href=\"/subscriber/login\">Existing User?</a>\n                </CardFooter>\n            </Card>\n        </div>\n    );\n}\n\nexport default SubscriberSignup\n","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Author/AuthorLogin.js",["97","98","99"],"/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Author/AuthorSignup.js",["100","101","102","103","104"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Form, FormInput, FormGroup } from 'shards-react';\nimport { register } from '../../actions/authorActions';\nimport { Card, CardHeader, CardTitle, CardImg, CardBody, CardFooter, Button } from 'shards-react';\nimport '../styles/UserSignUp.css';\nimport Swal from \"sweetalert2\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\n\n function AuthorSignup({ history }) {\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const dispatch = useDispatch();\n\n    const authorRegister = useSelector(state => state.authorRegister);\n    const { loading, error ,success , message } = authorRegister;\n\n\n\n    useEffect(() => {\n          if(error){     \n               Swal.fire({\n                    icon : 'error' ,\n                    text : `${error}`\n               })\n          }\n          if(success){\n               Swal.fire({\n                    icon : 'success' ,\n                    text : `${message}`\n               }).then(res => {\n                    history.push('/author/login')\n               })\n          }\n        \n    }, [history, error , success ]);\n\n    const submitHandler = e => {\n        e.preventDefault();\n        if (password !== confirmPassword) {\n            console.log('Passwords do not match');\n        } else {\n            dispatch(register(name, email, password, confirmPassword));\n            console.log(`Activation Link Sent to ${email}`);\n    };\n}\n    return (\n        <div className=\"signup\">\n            <Card className=\"sign\" theme=\"info\" style={{ maxWidth: '450px' }}>\n                {/* <CardImg src=\"https://place-hold.it/300x200\" /> */}\n                <CardBody>\n                    <CardTitle className=\"tex\">Author Signup</CardTitle>\n\n                    <Form onSubmit={submitHandler}>\n                        <FormGroup>\n                            <label htmlFor=\"username\">Username</label>\n                            <FormInput\n                                type=\"text\"\n                                id=\"username\"\n                                placeholder=\"Username\"\n                                onChange={event => {\n                                    setName(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <label htmlFor=\"email\">Email</label>\n                            <FormInput\n                                type=\"email\"\n                                id=\"email\"\n                                placeholder=\"Email\"\n                                onChange={event => {\n                                    setEmail(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <label htmlFor=\"password\">Password</label>\n                            <FormInput\n                                type=\"password\"\n                                id=\"#password\"\n                                placeholder=\"Password\"\n                                onChange={event => {\n                                    setPassword(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <label htmlFor=\"confirmpassword\">Confirm Password</label>\n                            <FormInput\n                                type=\"password\"\n                                id=\"confirmpassword\"\n                                placeholder=\"Confirm Password\"\n                                onChange={event => {\n                                    setConfirmPassword(event.target.value);\n                                }}\n                            />\n                        </FormGroup>\n                        <Button theme=\"success\">Sign Up</Button>\n                    </Form>\n                </CardBody>\n                <CardFooter>\n                    <a href=\"/subscriber/signup\">Are you a Subscriber?</a><br />\n\n                    <a href=\"/author/login\">Existing User?</a>\n                </CardFooter>\n            </Card>\n        </div>\n    );\n\n\n}\n\nexport default AuthorSignup","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/actions/authorActions.js",["105"],"import axios from 'axios'\nimport {\n  \n  AUTHOR_LOGIN_FAIL,\n  AUTHOR_LOGIN_REQUEST,\n  AUTHOR_LOGIN_SUCCESS,\n  AUTHOR_LOGOUT,\n\n  AUTHOR_REGISTER_FAIL,\n  AUTHOR_REGISTER_REQUEST,\n  AUTHOR_REGISTER_SUCCESS,\n  \n  AUTHOR_VERIFY_REQUEST,\n  AUTHOR_VERIFY_SUCCESS,\n  AUTHOR_VERIFY_FAIL,\n\n} from '../constants/userConstants'\n\n\nexport const register = (username, email, password , confirm_password) => async (dispatch) => {\n     try {\n       dispatch({\n         type: AUTHOR_REGISTER_REQUEST,\n       })\n   \n       await axios.post(\n         '/author/register',\n         { username, email, password , confirm_password },\n       ).then(res => {\n            dispatch({\n                 type : AUTHOR_REGISTER_SUCCESS ,\n                 payload : \"An Email has been sent to you.\"\n            })\n       })\n       \n     } catch (error) {\n       dispatch({\n         type: AUTHOR_REGISTER_FAIL,\n         payload:\n           error.response && error.response.data.message\n             ? error.response.data.message\n             : error.message,\n       })\n     }\n   }\n\n   export const verifyAuthor = (token) => async (dispatch) => {\n     try {\n       dispatch({\n         type:AUTHOR_VERIFY_REQUEST,\n       })\n   \n       await axios.post(\n         '/author/verify',\n         { token },\n       )\n       dispatch({\n         type:AUTHOR_VERIFY_SUCCESS,\n       })\n       \n       \n     } catch (error) {\n       dispatch({\n         type:AUTHOR_VERIFY_FAIL,\n         payload:\n           error.response && error.response.data.message\n             ? error.response.data.message\n             : error.message,\n       })\n     }\n   }\n\n\n   const login = (email, password) => async (dispatch) => {\n     try {\n       dispatch({\n         type: AUTHOR_LOGIN_REQUEST,\n       })\n   \n       const config = {\n         headers: {\n           'Content-Type': 'application/json',\n         },\n       }\n   \n       const { data } = await axios.post(\n         '/author/login',\n         { email, password },\n         config\n       )\n   \n       dispatch({\n         type: AUTHOR_LOGIN_SUCCESS,\n         payload: data,\n       })\n   \n       localStorage.setItem('authorInfo', JSON.stringify(data))\n     } catch (error) {\n       dispatch({\n         type: AUTHOR_LOGIN_FAIL,\n         payload:\n           error.response && error.response.data.message\n             ? error.response.data.message\n             : error.message,\n       })\n     }\n   }\n\n   export default login ","/home/siddharth/ReactProjects/Project/CelestialLearning-client/src/Components/Author/AuthorVerify.js",["106","107"],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":1,"column":8,"nodeType":"114","messageId":"115","endLine":1,"endColumn":14},{"ruleId":"112","severity":1,"message":"116","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":18},{"ruleId":"112","severity":1,"message":"117","line":18,"column":5,"nodeType":"114","messageId":"115","endLine":18,"endColumn":13},{"ruleId":"112","severity":1,"message":"118","line":19,"column":5,"nodeType":"114","messageId":"115","endLine":19,"endColumn":19},{"ruleId":"112","severity":1,"message":"119","line":20,"column":5,"nodeType":"114","messageId":"115","endLine":20,"endColumn":17},{"ruleId":"112","severity":1,"message":"120","line":21,"column":5,"nodeType":"114","messageId":"115","endLine":21,"endColumn":17},{"ruleId":"121","severity":1,"message":"122","line":41,"column":17,"nodeType":"123","endLine":41,"endColumn":35},{"ruleId":"112","severity":1,"message":"124","line":7,"column":3,"nodeType":"114","messageId":"115","endLine":7,"endColumn":20},{"ruleId":"112","severity":1,"message":"125","line":73,"column":10,"nodeType":"114","messageId":"115","endLine":73,"endColumn":15},{"ruleId":"112","severity":1,"message":"126","line":5,"column":39,"nodeType":"114","messageId":"115","endLine":5,"endColumn":46},{"ruleId":"112","severity":1,"message":"127","line":20,"column":13,"nodeType":"114","messageId":"115","endLine":20,"endColumn":20},{"ruleId":"128","severity":1,"message":"129","line":33,"column":8,"nodeType":"130","endLine":33,"endColumn":33,"suggestions":"131"},{"ruleId":"112","severity":1,"message":"127","line":14,"column":14,"nodeType":"114","messageId":"115","endLine":14,"endColumn":21},{"ruleId":"112","severity":1,"message":"132","line":6,"column":16,"nodeType":"114","messageId":"115","endLine":6,"endColumn":26},{"ruleId":"112","severity":1,"message":"126","line":6,"column":39,"nodeType":"114","messageId":"115","endLine":6,"endColumn":46},{"ruleId":"112","severity":1,"message":"127","line":26,"column":13,"nodeType":"114","messageId":"115","endLine":26,"endColumn":20},{"ruleId":"128","severity":1,"message":"133","line":48,"column":8,"nodeType":"130","endLine":48,"endColumn":25,"suggestions":"134"},{"ruleId":"112","severity":1,"message":"126","line":5,"column":39,"nodeType":"114","messageId":"115","endLine":5,"endColumn":46},{"ruleId":"112","severity":1,"message":"127","line":18,"column":13,"nodeType":"114","messageId":"115","endLine":18,"endColumn":20},{"ruleId":"128","severity":1,"message":"135","line":30,"column":8,"nodeType":"130","endLine":30,"endColumn":29,"suggestions":"136"},{"ruleId":"112","severity":1,"message":"137","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":20},{"ruleId":"112","severity":1,"message":"132","line":6,"column":16,"nodeType":"114","messageId":"115","endLine":6,"endColumn":26},{"ruleId":"112","severity":1,"message":"126","line":6,"column":39,"nodeType":"114","messageId":"115","endLine":6,"endColumn":46},{"ruleId":"112","severity":1,"message":"127","line":23,"column":13,"nodeType":"114","messageId":"115","endLine":23,"endColumn":20},{"ruleId":"128","severity":1,"message":"133","line":43,"column":8,"nodeType":"130","endLine":43,"endColumn":35,"suggestions":"138"},{"ruleId":"112","severity":1,"message":"139","line":7,"column":3,"nodeType":"114","messageId":"115","endLine":7,"endColumn":16},{"ruleId":"112","severity":1,"message":"127","line":10,"column":13,"nodeType":"114","messageId":"115","endLine":10,"endColumn":20},{"ruleId":"112","severity":1,"message":"140","line":10,"column":22,"nodeType":"114","messageId":"115","endLine":10,"endColumn":27},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'CourseCard' is defined but never used.","'Dropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SUBSCRIBER_LOGOUT' is defined but never used.","'login' is assigned a value but never used.","'CardImg' is defined but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["143"],"'CardHeader' is defined but never used.","React Hook useEffect has a missing dependency: 'message'. Either include it or remove the dependency array.",["144"],"React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.",["145"],"'useHistory' is defined but never used.",["146"],"'AUTHOR_LOGOUT' is defined but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [subscriberInfo, error, history]",{"range":"155","text":"156"},"Update the dependencies array to be: [error, message, success]",{"range":"157","text":"158"},"Update the dependencies array to be: [history, authorInfo, error]",{"range":"159","text":"160"},"Update the dependencies array to be: [history, error, success, message]",{"range":"161","text":"162"},[1061,1086],"[subscriberInfo, error, history]",[1465,1482],"[error, message, success]",[997,1018],"[history, authorInfo, error]",[1382,1409],"[history, error, success, message]"]